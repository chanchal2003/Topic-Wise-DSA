/*
    Linked List : a->b->c->d->e->f->g->h->i
    Fold Linked List (Reorder) : a->i->b->h->c->g->d->f->e
*/
#include<iostream>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;

    Node(int data)
    {
        this->data=data;
        this->next=NULL;
    }
};
void display_LinkedList(Node* head)
{
    Node* current=head;
    while(current!=NULL)
    {
        cout<<current->data;
        if(current->next!=NULL)
        {
            cout<<"->";
        }
        else
        {
            cout<<"->NULL";
        }
        current=current->next;
    }
    cout<<endl;
}

Node* middleNode(Node* head)
{
    if(head==NULL || head->next==NULL)
    {
        return head;
    }

    Node* slow=head;
    Node* fast=head;
    while(fast->next!=NULL && fast->next->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }

    return slow;
}

Node* reverse_LinkedList(Node* head)
{
    if(head==NULL || head->next==NULL)
    {
        return head;
    }

    Node* previous=NULL;
    Node* current=head;
    Node* forward=NULL;

    while(current!=NULL)
    {
        forward=current->next; // backup

        current->next=previous; // link

        previous=current;
        current=forward;
    }

    return previous;
}

void Fold_LinkedList(Node* head)
{
    if(head==NULL || head->next==NULL)
    {
        return ;
    }

    Node* midNode=middleNode(head);
    Node* newHead=midNode->next;
    midNode->next=NULL;

    newHead=reverse_LinkedList(newHead);

    Node* current1=head;
    Node* current2=newHead;
    Node* forward1=NULL;
    Node* forward2=NULL;
    while(current1!=NULL && current2!=NULL)
    {
        // Backup
        forward1=current1->next;
        forward2=current2->next;

        // Links
        current1->next=current2;
        current2->next=forward1;

        current1=forward1;
        current2=forward2; 
    }

}

int main()
{
    Node* head=new Node(1);
    head->next=new Node(2);
    head->next->next=new Node(3);
    head->next->next->next=new Node(4);

    display_LinkedList(head);
    Fold_LinkedList(head);
    display_LinkedList(head);
    
    return 0;
}