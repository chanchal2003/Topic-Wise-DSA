/*
    Linked List : a->i->b->h->c->g->d->f->e
    Unfold Linked List (Reorder) : a->b->c->d->e->f->g->h->i
*/
#include<iostream>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;

    Node(int data)
    {
        this->data=data;
        this->next=NULL;
    }
};
void display_LinkedList(Node* head)
{
    Node* current=head;
    while(current!=NULL)
    {
        cout<<current->data;
        if(current->next!=NULL)
        {
            cout<<"->";
        }
        else
        {
            cout<<"->NULL";
        }
        current=current->next;
    }
    cout<<endl;
}

Node* reverse_LinkedList(Node* head)
{
    if(head==NULL || head->next==NULL)
    {
        return head;
    }

    Node* previous=NULL;
    Node* current=head;
    Node* forward=NULL;

    while(current!=NULL)
    {
        forward=current->next; // backup

        current->next=previous; // link

        previous=current;
        current=forward;
    }

    return previous;
}

void Unfold_LinkedList(Node* head)
{
    if(head==NULL || head->next==NULL)
    {
        return ;
    }

    Node* firstHead=head; 
    Node* current1=firstHead; // firstPrevious of the video

    Node* secondHead=head->next;
    Node* current2=secondHead; // seconPrevious of the video

    Node* forward=NULL;
    while(current2!=NULL && current2->next!=NULL)
    {
        // Backup
        forward=current2->next;

        // Links
        current1->next=forward;
        current2->next=forward->next;

        // Move
        current1=current1->next;
        current2=current2->next;
    }
    current1->next=NULL;

    secondHead=reverse_LinkedList(secondHead);
    current1->next=secondHead;
}

int main()
{
    Node* head=new Node(1);
    head->next=new Node(4);
    head->next->next=new Node(2);
    head->next->next->next=new Node(3);

    display_LinkedList(head);
    Unfold_LinkedList(head);
    display_LinkedList(head);
    
    return 0;
}